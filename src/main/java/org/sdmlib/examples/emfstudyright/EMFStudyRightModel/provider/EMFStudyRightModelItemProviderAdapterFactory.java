/**
 */
package org.sdmlib.examples.emfstudyright.EMFStudyRightModel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.sdmlib.examples.emfstudyright.EMFStudyRightModel.util.EMFStudyRightModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EMFStudyRightModelItemProviderAdapterFactory extends EMFStudyRightModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
   /**
    * This keeps track of the root adapter factory that delegates to this adapter factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ComposedAdapterFactory parentAdapterFactory;

   /**
    * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IChangeNotifier changeNotifier = new ChangeNotifier();

   /**
    * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Collection<Object> supportedTypes = new ArrayList<Object>();

   /**
    * This constructs an instance.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public EMFStudyRightModelItemProviderAdapterFactory()
   {
      supportedTypes.add(IEditingDomainItemProvider.class);
      supportedTypes.add(IStructuredItemContentProvider.class);
      supportedTypes.add(ITreeItemContentProvider.class);
      supportedTypes.add(IItemLabelProvider.class);
      supportedTypes.add(IItemPropertySource.class);
   }

   /**
    * This keeps track of the one adapter used for all {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.University} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected UniversityItemProvider universityItemProvider;

   /**
    * This creates an adapter for a {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.University}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createUniversityAdapter()
   {
      if (universityItemProvider == null)
      {
         universityItemProvider = new UniversityItemProvider(this);
      }

      return universityItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.Student} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected StudentItemProvider studentItemProvider;

   /**
    * This creates an adapter for a {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.Student}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createStudentAdapter()
   {
      if (studentItemProvider == null)
      {
         studentItemProvider = new StudentItemProvider(this);
      }

      return studentItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.TeachingAssistant} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TeachingAssistantItemProvider teachingAssistantItemProvider;

   /**
    * This creates an adapter for a {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.TeachingAssistant}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTeachingAssistantAdapter()
   {
      if (teachingAssistantItemProvider == null)
      {
         teachingAssistantItemProvider = new TeachingAssistantItemProvider(this);
      }

      return teachingAssistantItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.Room} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected RoomItemProvider roomItemProvider;

   /**
    * This creates an adapter for a {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.Room}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createRoomAdapter()
   {
      if (roomItemProvider == null)
      {
         roomItemProvider = new RoomItemProvider(this);
      }

      return roomItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.Assignment} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AssignmentItemProvider assignmentItemProvider;

   /**
    * This creates an adapter for a {@link org.sdmlib.examples.emfstudyright.EMFStudyRightModel.Assignment}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAssignmentAdapter()
   {
      if (assignmentItemProvider == null)
      {
         assignmentItemProvider = new AssignmentItemProvider(this);
      }

      return assignmentItemProvider;
   }

   /**
    * This returns the root adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public ComposeableAdapterFactory getRootAdapterFactory()
   {
      return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
   }

   /**
    * This sets the composed adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
   {
      this.parentAdapterFactory = parentAdapterFactory;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public boolean isFactoryForType(Object type)
   {
      return supportedTypes.contains(type) || super.isFactoryForType(type);
   }

   /**
    * This implementation substitutes the factory itself as the key for the adapter.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter adapt(Notifier notifier, Object type)
   {
      return super.adapt(notifier, this);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Object adapt(Object object, Object type)
   {
      if (isFactoryForType(type))
      {
         Object adapter = super.adapt(object, type);
         if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
         {
            return adapter;
         }
      }

      return null;
   }

   /**
    * This adds a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void addListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.addListener(notifyChangedListener);
   }

   /**
    * This removes a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void removeListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.removeListener(notifyChangedListener);
   }

   /**
    * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void fireNotifyChanged(Notification notification)
   {
      changeNotifier.fireNotifyChanged(notification);

      if (parentAdapterFactory != null)
      {
         parentAdapterFactory.fireNotifyChanged(notification);
      }
   }

   /**
    * This disposes all of the item providers created by this factory. 
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void dispose()
   {
      if (universityItemProvider != null) universityItemProvider.dispose();
      if (studentItemProvider != null) studentItemProvider.dispose();
      if (teachingAssistantItemProvider != null) teachingAssistantItemProvider.dispose();
      if (roomItemProvider != null) roomItemProvider.dispose();
      if (assignmentItemProvider != null) assignmentItemProvider.dispose();
   }

}
